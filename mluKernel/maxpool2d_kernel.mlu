#include <bang.h>

#define DATA_NUM 4096

__mlu_entry__ void maxpool2d_kernel(float* dst, float* src, int channel,
                                    int height , int width, 
                                    int kernel_height, int kernel_width,
                                    int stride_width, int stride_height,
                                    int out_h, int out_w) {
  __bang_printf("%s", "maxpool2d_kernel calculating\n"); 
  int len = channel * height * width;   
  int out_len = channel * out_h * out_w;                               
  __nram__ float nram_dst_chw[DATA_NUM];
  __nram__ float nram_src_chw[DATA_NUM];
  __nram__ float nram_dst_hwc[DATA_NUM];
  __nram__ float nram_src_hwc[DATA_NUM];
  __memcpy(nram_src_chw, src, len * sizeof(float), GDRAM2NRAM);
  __bang_reshape_nchw2nhwc(nram_src_hwc,nram_src_chw,1,height,width,channel);
  __bang_maxpool(nram_dst_hwc, nram_src_hwc, channel, height, width, kernel_height, kernel_width,stride_width,stride_height);
  __bang_reshape_nhwc2nchw(nram_dst_chw, nram_dst_hwc, 1, out_h, out_w, channel);                                    
  __memcpy(dst, nram_dst_chw, out_len * sizeof(float), NRAM2GDRAM);
}

void maxpool2d_mlu(float* dst, float* src, const int number,int channel,
                    int height, int width,
                    int kernel_height, int kernel_width,
                    int stride_width, int stride_height) {
    cnrtQueue_t queue[number];
    CNRT_CHECK(cnrtSetDevice(0));
    
    for (int i=0; i < number; i++) {
      CNRT_CHECK(cnrtQueueCreate(&queue[i]));
    }

    cnrtDim3_t dim = {1,1,1};
    cnrtFunctionType_t ktype = CNRT_FUNC_TYPE_BLOCK;
    
    int len = channel * height * width;
    float* mlu_dst;
    float* mlu_src;

    int output_h = (height - kernel_height) / stride_height + 1;
    int output_w = (width  - kernel_width) / stride_width + 1;
    int out_len = output_h * output_w * channel;

    CNRT_CHECK(cnrtMalloc((void**)&mlu_dst, len * sizeof(float)));
    CNRT_CHECK(cnrtMalloc((void**)&mlu_src, len * sizeof(float)));
    
    for (int i=0; i < number; i++) {
      CNRT_CHECK(cnrtMemcpyAsync(mlu_src+i*len, src+i*len,  len * sizeof(float), queue[i],cnrtMemcpyHostToDev));
      maxpool2d_kernel<<<dim, ktype, queue[i]>>>(mlu_dst+i*out_len, mlu_src+i*len, channel, height, width, kernel_height, kernel_width, stride_width, stride_height,output_h, output_w);
      CNRT_CHECK(cnrtMemcpyAsync(dst+i*out_len, mlu_dst+i*out_len, out_len * sizeof(float),queue[i], cnrtMemcpyDevToHost));
    }
    cnrtSyncDevice();

    for (int i=0; i < number; i++) {
      CNRT_CHECK(cnrtQueueDestroy(queue[i]));
    }

    cnrtFree(mlu_dst);
    cnrtFree(mlu_src);

    return;
}